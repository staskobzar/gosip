package dns

import (
	"net"
	"os"
	"strings"
	"testing"

	"github.com/miekg/dns"
	"github.com/stretchr/testify/assert"
)

func TestNewResolver(t *testing.T) {
	t.Run("creates from file succsessfully", func(t *testing.T) {
		f, err := os.CreateTemp("", "")
		assert.Nil(t, err)
		defer os.Remove(f.Name())
		_, err = f.Write([]byte("# fake resolv.conf\nnameserver 127.0.0.53\n" +
			"nameserver 8.8.8.8\noptions edns0 trust-ad\nsearch google.ca\n"))
		assert.Nil(t, err)

		resv, err := NewResolver(f.Name())
		assert.Nil(t, err)
		assert.ElementsMatch(t, []string{"127.0.0.53", "8.8.8.8"}, resv.conf.Servers)
	})

	t.Run("file with invalid content", func(t *testing.T) {
		f, err := os.CreateTemp("", "")
		assert.Nil(t, err)
		defer os.Remove(f.Name())
		_, _ = f.Write([]byte("foobar"))
		resv, err := NewResolver(f.Name())
		assert.NotNil(t, err)
		assert.Nil(t, resv)
	})

	t.Run("invalid file", func(t *testing.T) {
		f, err := os.CreateTemp("", "")
		assert.Nil(t, err)
		os.Remove(f.Name())
		resv, err := NewResolver(f.Name())
		assert.NotNil(t, err)
		assert.Nil(t, resv)
	})
}

func mockDNSServ(data ...[]byte) string {
	try := func(err error) {
		if err != nil {
			panic(err)
		}
	}
	addr, _ := net.ResolveUDPAddr("udp", "127.0.0.1:0")
	conn, err := net.ListenUDP("udp", addr)
	try(err)
	_, port, _ := net.SplitHostPort(conn.LocalAddr().String())

	go func() {
		for _, raw := range data {
			buf := make([]byte, 1024)
			n, addr, err := conn.ReadFrom(buf)
			try(err)

			resp := new(dns.Msg)
			if err := resp.Unpack(raw); err != nil {
				_, _ = conn.WriteTo([]byte{0, 0, 0}, addr)
				return
			}

			req := new(dns.Msg)
			try(req.Unpack(buf[:n]))
			resp.Id = req.Id // make sure it has same Id
			data, err := resp.Pack()
			try(err)
			_, err = conn.WriteTo(data, addr)
			try(err)
		}
	}()
	return port
}

func TestResolverLookupNAPTR(t *testing.T) {
	multiResp := []byte{
		0xda, 0x75, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x23, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x23, 0x00,
		0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x27, 0x00, 0x32, 0x00, 0x32, 0x02, 0x73, 0x65, 0x08, 0x53,
		0x49, 0x50, 0x53, 0x2b, 0x44, 0x32, 0x54, 0x00, 0x05, 0x5f, 0x73, 0x69, 0x70, 0x73, 0x04, 0x5f,
		0x74, 0x63, 0x70, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c,
		0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x25, 0x00, 0x5a, 0x00, 0x32, 0x02, 0x73,
		0x65, 0x07, 0x53, 0x49, 0x50, 0x2b, 0x44, 0x32, 0x54, 0x00, 0x04, 0x5f, 0x73, 0x69, 0x70, 0x04,
		0x5f, 0x74, 0x63, 0x70, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0,
		0x0c, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x25, 0x00, 0x64, 0x00, 0x32, 0x02,
		0x73, 0x65, 0x07, 0x53, 0x49, 0x50, 0x2b, 0x44, 0x32, 0x55, 0x00, 0x04, 0x5f, 0x73, 0x69, 0x70,
		0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	port := mockDNSServ(multiResp, []byte{0})
	r, err := NewResolverReader(strings.NewReader("nameserver 127.0.0.1\n"))
	assert.Nil(t, err)
	r.conf.Port = port

	t.Run("multiple targets response", func(t *testing.T) {
		rr := r.LookupNAPTR("apple.com")
		assert.Len(t, rr, 3)

		assert.Equal(t, 50, rr[0].Order)
		assert.Equal(t, 50, rr[0].Pref)
		assert.Equal(t, "se", rr[0].Flags)
		assert.Equal(t, "SIPS+D2T", rr[0].Service)
		assert.Equal(t, "_sips._tcp.apple.com.", rr[0].Replace)

		assert.Equal(t, 90, rr[1].Order)
		assert.Equal(t, 50, rr[1].Pref)
		assert.Equal(t, "se", rr[1].Flags)
		assert.Equal(t, "SIP+D2T", rr[1].Service)
		assert.Equal(t, "_sip._tcp.apple.com.", rr[1].Replace)

		assert.Equal(t, 100, rr[2].Order)
		assert.Equal(t, 50, rr[2].Pref)
		assert.Equal(t, "se", rr[2].Flags)
		assert.Equal(t, "SIP+D2U", rr[2].Service)
		assert.Equal(t, "_sip._udp.apple.com.", rr[2].Replace)
	})

	t.Run("empty response", func(t *testing.T) {
		rr := r.LookupNAPTR("apple.com")
		assert.Len(t, rr, 0)
	})
}

func TestResolverLookupSRV(t *testing.T) {
	multiSRV := []byte{
		0x6d, 0xc0, 0x81, 0x80, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5f, 0x73, 0x69, 0x70,
		0x4, 0x5f, 0x75, 0x64, 0x70, 0x5, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0,
		0x0, 0x21, 0x0, 0x1, 0x4, 0x5f, 0x73, 0x69, 0x70, 0x4, 0x5f, 0x75, 0x64, 0x70, 0x5, 0x61, 0x70,
		0x70, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x21, 0x0, 0x1, 0x0, 0x0, 0x54, 0x60, 0x0,
		0x16, 0x0, 0x0, 0x0, 0x0, 0x13, 0xc4, 0x2, 0x68, 0x31, 0x1, 0x76, 0x5, 0x61, 0x61, 0x70, 0x6c,
		0x69, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x4, 0x5f, 0x73, 0x69, 0x70, 0x4, 0x5f, 0x75, 0x64, 0x70,
		0x5, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x21, 0x0, 0x1, 0x0, 0x0,
		0x54, 0x60, 0x0, 0x16, 0x0, 0x50, 0x0, 0x0, 0x13, 0xc4, 0x2, 0x68, 0x32, 0x1, 0x76, 0x5, 0x61,
		0x61, 0x70, 0x6c, 0x69, 0x3, 0x63, 0x6f, 0x6d, 0x0}
	singleSRV := []byte{
		0xc2, 0xda, 0x81, 0x80, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5f, 0x73, 0x69, 0x70, 0x4,
		0x5f, 0x75, 0x64, 0x70, 0x5, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x21,
		0x0, 0x1, 0x4, 0x5f, 0x73, 0x69, 0x70, 0x4, 0x5f, 0x75, 0x64, 0x70, 0x5, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x21, 0x0, 0x1, 0x0, 0x0, 0x54, 0x60, 0x0, 0x18, 0x0, 0x0,
		0x0, 0x0, 0x13, 0xc4, 0x2, 0x68, 0x31, 0x3, 0x73, 0x69, 0x70, 0x5, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x3, 0x63, 0x6f, 0x6d, 0x0}
	port := mockDNSServ(multiSRV, singleSRV, []byte{0})
	r, err := NewResolverReader(strings.NewReader("nameserver 127.0.0.1\n"))
	assert.Nil(t, err)
	r.conf.Port = port

	t.Run("multiple srv response", func(t *testing.T) {
		srv := r.LookupSRV("_sip._udp.apple.com.")
		assert.Len(t, srv, 2)
		assert.Equal(t, "h1.v.aapli.com.", srv[0].Target)
		assert.Equal(t, 5060, srv[0].Port)
		assert.Equal(t, 0, srv[0].Weight)
		assert.Equal(t, 0, srv[0].Priority)

		assert.Equal(t, "h2.v.aapli.com.", srv[1].Target)
		assert.Equal(t, 5060, srv[1].Port)
		assert.Equal(t, 0, srv[1].Weight)
		assert.Equal(t, 80, srv[1].Priority)
	})

	t.Run("single server response", func(t *testing.T) {
		srv := r.LookupSRV("_sip._udp.apple.com.")
		assert.Len(t, srv, 1)
		assert.Equal(t, "h1.sip.apple.com.", srv[0].Target)
		assert.Equal(t, 5060, srv[0].Port)
		assert.Equal(t, 0, srv[0].Weight)
		assert.Equal(t, 0, srv[0].Priority)
	})

	t.Run("empty response", func(t *testing.T) {
		srv := r.LookupSRV("_sip._udp.apple.com.")
		assert.Len(t, srv, 0)
	})
}

func TestResolverLookupAddr(t *testing.T) {
	multiAddr := []byte{0xa2, 0xdb, 0x81, 0x80, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x0, 0xc, 0x67, 0x73, 0x6c, 0x62, 0x2d, 0x62, 0x32, 0x62, 0x2d, 0x65, 0x78,
		0x74, 0x1, 0x76, 0x7, 0x61, 0x61, 0x70, 0x6c, 0x69, 0x6d, 0x67, 0x3, 0x63, 0x6f,
		0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0xc, 0x67, 0x73, 0x6c, 0x62, 0x2d, 0x62, 0x32,
		0x62, 0x2d, 0x65, 0x78, 0x74, 0x1, 0x76, 0x7, 0x61, 0x61, 0x70, 0x6c, 0x69,
		0x6d, 0x67, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1e,
		0x0, 0x4, 0x11, 0x2f, 0x31, 0x4b, 0xc, 0x67, 0x73, 0x6c, 0x62, 0x2d, 0x62, 0x32,
		0x62, 0x2d, 0x65, 0x78, 0x74, 0x1, 0x76, 0x7, 0x61, 0x61, 0x70, 0x6c, 0x69,
		0x6d, 0x67, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa,
		0x0, 0x4, 0x11, 0x2f, 0x30, 0x8e}

	singleAddr := []byte{0xe8, 0x17, 0x81, 0x80, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0,
		0x0, 0x0, 0xc, 0x67, 0x73, 0x6c, 0x62, 0x2d, 0x62, 0x32, 0x62, 0x2d, 0x65,
		0x78, 0x74, 0x1, 0x76, 0x7, 0x61, 0x61, 0x70, 0x6c, 0x69, 0x6d, 0x67, 0x3,
		0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0xc, 0x67, 0x73, 0x6c, 0x62,
		0x2d, 0x62, 0x32, 0x62, 0x2d, 0x65, 0x78, 0x74, 0x1, 0x76, 0x7, 0x61, 0x61,
		0x70, 0x6c, 0x69, 0x6d, 0x67, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0,
		0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x4, 0x11, 0x2f, 0x31, 0x4e,
	}

	port := mockDNSServ(multiAddr, singleAddr, []byte{})
	r, err := NewResolverReader(strings.NewReader("nameserver 127.0.0.1\n"))
	assert.Nil(t, err)
	r.conf.Port = port

	t.Run("multiple addresses response", func(t *testing.T) {
		addr := r.LookupAddr("gslb-b2b-ext.v.aaplimg.com.")
		assert.Len(t, addr, 2)
		assert.Equal(t, "17.47.49.75", addr[0].String())
		assert.Equal(t, "17.47.48.142", addr[1].String())
	})

	t.Run("single addresses response", func(t *testing.T) {
		addr := r.LookupAddr("gslb-b2b-ext.v.aaplimg.com.")
		assert.Len(t, addr, 1)
		assert.Equal(t, "17.47.49.78", addr[0].String())
	})

	t.Run("empty response", func(t *testing.T) {
		addr := r.LookupAddr("gslb-b2b-ext.v.aaplimg.com.")
		assert.Len(t, addr, 0)
	})
}

func TestSortSRV(t *testing.T) {
	tests := map[string]struct {
		input []*SRV
		want  []*SRV
	}{
		`empty input`: {nil, nil},
		`single element`: {
			[]*SRV{{"a.sip.com", 5060, 0, 0}},
			[]*SRV{{"a.sip.com", 5060, 0, 0}},
		},
		`no sort needed`: {
			[]*SRV{
				{"a.com", 5060, 0, 0},
				{"b.com", 5060, 100, 0},
				{"c.com", 5060, 1000, 0},
			},
			[]*SRV{
				{"a.com", 5060, 0, 0},
				{"b.com", 5060, 100, 0},
				{"c.com", 5060, 1000, 0},
			},
		},
		`sort when priorities only`: {
			[]*SRV{
				{"c.com", 5060, 1000, 0},
				{"a.com", 5060, 0, 0},
				{"b.com", 5060, 100, 0},
			},
			[]*SRV{
				{"a.com", 5060, 0, 0},
				{"b.com", 5060, 100, 0},
				{"c.com", 5060, 1000, 0},
			},
		},
		`sort priorities with weights`: {
			[]*SRV{
				{"c.com", 5060, 1000, 0},
				{"a.com", 5060, 0, 10},
				{"b.com", 5060, 0, 50},
			},
			[]*SRV{
				{"b.com", 5060, 0, 50},
				{"a.com", 5060, 0, 10},
				{"c.com", 5060, 1000, 0},
			},
		},
		`sort weights`: {
			[]*SRV{
				{"c.com", 5060, 0, 60},
				{"a.com", 5060, 0, 10},
				{"b.com", 5060, 0, 50},
				{"d.com", 5060, 0, 110},
			},
			[]*SRV{
				{"d.com", 5060, 0, 110},
				{"c.com", 5060, 0, 60},
				{"b.com", 5060, 0, 50},
				{"a.com", 5060, 0, 10},
			},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			srv := sortSRV(tc.input)
			assert.Equal(t, len(tc.want), len(srv))
			for i, rec := range tc.want {
				assert.Equal(t, rec, srv[i])
			}
		})
	}
}

func TestSortNAPTR(t *testing.T) {
	tests := map[string]struct {
		input []*NAPTR
		want  []*NAPTR
	}{
		`empty input`: {nil, nil},
		`single element`: {
			[]*NAPTR{{Replace: "_sip._udp.a.com", Order: 0, Pref: 0}},
			[]*NAPTR{{Replace: "_sip._udp.a.com", Order: 0, Pref: 0}},
		},
		`order sort`: {
			[]*NAPTR{
				{Replace: "_sip._udp.c.com", Order: 120, Pref: 0},
				{Replace: "_sip._udp.a.com", Order: 10, Pref: 0},
				{Replace: "_sip._udp.b.com", Order: 50, Pref: 0},
			},
			[]*NAPTR{
				{Replace: "_sip._udp.a.com", Order: 10, Pref: 0},
				{Replace: "_sip._udp.b.com", Order: 50, Pref: 0},
				{Replace: "_sip._udp.c.com", Order: 120, Pref: 0},
			},
		},
		`pref sort within the same order`: {
			[]*NAPTR{
				{Replace: "_sip._udp.e.com", Order: 20, Pref: 56},
				{Replace: "_sip._udp.c.com", Order: 10, Pref: 120},
				{Replace: "_sip._udp.b.com", Order: 10, Pref: 67},
				{Replace: "_sip._udp.d.com", Order: 20, Pref: 54},
				{Replace: "_sip._udp.a.com", Order: 10, Pref: 43},
			},
			[]*NAPTR{
				{Replace: "_sip._udp.a.com", Order: 10, Pref: 43},
				{Replace: "_sip._udp.b.com", Order: 10, Pref: 67},
				{Replace: "_sip._udp.c.com", Order: 10, Pref: 120},
				{Replace: "_sip._udp.d.com", Order: 20, Pref: 54},
				{Replace: "_sip._udp.e.com", Order: 20, Pref: 56},
			},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			naptr := sortNAPTR(tc.input)
			assert.Equal(t, len(tc.want), len(naptr))
			for i, rec := range tc.want {
				assert.Equal(t, rec, naptr[i])
			}
		})
	}
}
